import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { 
  TrendingUp, TrendingDown, Activity, BarChart3, Zap, DollarSign, Percent, 
  Wifi, WifiOff, Bell, Download, Settings, Moon, Sun, Target,
  LineChart, Clock, CheckCircle, X, Star, Users, Share2,
  Heart, MessageCircle, Crown, Menu, Home, User, Building,
  ChevronLeft, ChevronRight, RefreshCw, Signal, Globe, Coins
} from 'lucide-react';

// =============================================================
// Multi-Asset Market Data
// =============================================================

const ASSET_CLASSES = {
  STOCKS: {
    name: 'Stocks',
    icon: 'ðŸ“ˆ',
    assets: [
      { symbol: 'AAPL', name: 'Apple Inc.', basePrice: 175, pip: 0.01 },
      { symbol: 'MSFT', name: 'Microsoft Corp.', basePrice: 340, pip: 0.01 },
      { symbol: 'GOOGL', name: 'Alphabet Inc.', basePrice: 125, pip: 0.01 },
      { symbol: 'TSLA', name: 'Tesla Inc.', basePrice: 200, pip: 0.01 },
      { symbol: 'AMZN', name: 'Amazon.com Inc.', basePrice: 140, pip: 0.01 },
      { symbol: 'NVDA', name: 'NVIDIA Corp.', basePrice: 450, pip: 0.01 },
      { symbol: 'META', name: 'Meta Platforms', basePrice: 320, pip: 0.01 }
    ]
  },
  FOREX: {
    name: 'Forex',
    icon: 'ðŸ’±',
    assets: [
      { symbol: 'EURUSD', name: 'Euro / US Dollar', basePrice: 1.0850, pip: 0.0001 },
      { symbol: 'GBPUSD', name: 'British Pound / US Dollar', basePrice: 1.2650, pip: 0.0001 },
      { symbol: 'USDJPY', name: 'US Dollar / Japanese Yen', basePrice: 149.50, pip: 0.01 },
      { symbol: 'USDCHF', name: 'US Dollar / Swiss Franc', basePrice: 0.8850, pip: 0.0001 },
      { symbol: 'AUDUSD', name: 'Australian Dollar / US Dollar', basePrice: 0.6450, pip: 0.0001 },
      { symbol: 'USDCAD', name: 'US Dollar / Canadian Dollar', basePrice: 1.3650, pip: 0.0001 },
      { symbol: 'EURGBP', name: 'Euro / British Pound', basePrice: 0.8580, pip: 0.0001 }
    ]
  },
  CRYPTO: {
    name: 'Crypto',
    icon: 'â‚¿',
    assets: [
      { symbol: 'BTCUSD', name: 'Bitcoin', basePrice: 42500, pip: 1 },
      { symbol: 'ETHUSD', name: 'Ethereum', basePrice: 2650, pip: 0.1 },
      { symbol: 'ADAUSD', name: 'Cardano', basePrice: 0.45, pip: 0.001 },
      { symbol: 'SOLUSD', name: 'Solana', basePrice: 65, pip: 0.01 },
      { symbol: 'DOTUSD', name: 'Polkadot', basePrice: 6.8, pip: 0.01 },
      { symbol: 'LINKUSD', name: 'Chainlink', basePrice: 14.5, pip: 0.01 }
    ]
  },
  COMMODITIES: {
    name: 'Commodities',
    icon: 'ðŸ¥‡',
    assets: [
      { symbol: 'XAUUSD', name: 'Gold', basePrice: 2045, pip: 0.1 },
      { symbol: 'XAGUSD', name: 'Silver', basePrice: 24.5, pip: 0.01 },
      { symbol: 'WTIUSD', name: 'Crude Oil WTI', basePrice: 72.5, pip: 0.01 },
      { symbol: 'BRTUSD', name: 'Brent Oil', basePrice: 77.8, pip: 0.01 }
    ]
  },
  INDICES: {
    name: 'Indices',
    icon: 'ðŸ“Š',
    assets: [
      { symbol: 'SPX500', name: 'S&P 500', basePrice: 4750, pip: 0.1 },
      { symbol: 'NAS100', name: 'NASDAQ 100', basePrice: 16800, pip: 0.1 },
      { symbol: 'US30', name: 'Dow Jones 30', basePrice: 37500, pip: 1 },
      { symbol: 'GER30', name: 'DAX 30', basePrice: 16200, pip: 1 }
    ]
  }
};

// =============================================================
// Simple Market Data Generator
// =============================================================

class MarketDataGenerator {
  constructor() {
    this.prices = new Map();
    this.initialized = false;
  }

  initialize() {
    if (this.initialized) return;
    
    // Initialize all asset prices
    Object.values(ASSET_CLASSES).forEach(assetClass => {
      assetClass.assets.forEach(asset => {
        this.prices.set(asset.symbol, {
          ...asset,
          currentPrice: asset.basePrice,
          change: 0,
          changePercent: 0,
          volume: this.generateVolume(asset.symbol),
          lastUpdate: Date.now()
        });
      });
    });
    
    this.initialized = true;
  }

  generateVolume(symbol) {
    if (symbol.includes('USD') && symbol.length === 6) {
      // Forex - higher volume
      return Math.floor(Math.random() * 50000000) + 10000000;
    } else if (symbol.includes('BTC') || symbol.includes('ETH')) {
      // Crypto - medium volume
      return Math.floor(Math.random() * 1000000) + 100000;
    } else {
      // Stocks - normal volume
      return Math.floor(Math.random() * 5000000) + 500000;
    }
  }

  updatePrices() {
    if (!this.initialized) this.initialize();

    const now = Date.now();
    
    for (const [symbol, data] of this.prices.entries()) {
      // Different volatility for different asset classes
      let volatility = 0.01; // 1% default
      
      if (symbol.includes('USD') && symbol.length === 6) {
        volatility = 0.005; // 0.5% for forex
      } else if (symbol.includes('BTC') || symbol.includes('ETH')) {
        volatility = 0.03; // 3% for crypto
      } else if (symbol.includes('XAU') || symbol.includes('XAG')) {
        volatility = 0.015; // 1.5% for precious metals
      }

      // Random price movement
      const change = (Math.random() - 0.5) * volatility;
      const oldPrice = data.currentPrice;
      const newPrice = oldPrice * (1 + change);
      const priceChange = newPrice - oldPrice;
      const changePercent = (priceChange / oldPrice) * 100;

      this.prices.set(symbol, {
        ...data,
        currentPrice: newPrice,
        change: priceChange,
        changePercent: changePercent,
        volume: this.generateVolume(symbol),
        lastUpdate: now
      });
    }
  }

  getPrice(symbol) {
    return this.prices.get(symbol) || null;
  }

  getAllPrices() {
    return Array.from(this.prices.values());
  }

  getAssetsByClass(assetClass) {
    if (!ASSET_CLASSES[assetClass]) return [];
    
    return ASSET_CLASSES[assetClass].assets.map(asset => {
      const price = this.getPrice(asset.symbol);
      return price || asset;
    });
  }
}

// =============================================================
// AI Signal Analysis Engine
// =============================================================

class AISignalEngine {
  constructor() {
    this.priceHistory = new Map();
    this.signals = [];
    this.model = {
      accuracy: 87.5,
      learningRate: 0.01,
      trainingData: []
    };
  }

  // Add price data for analysis
  addPriceData(symbol, price, volume) {
    if (!this.priceHistory.has(symbol)) {
      this.priceHistory.set(symbol, []);
    }
    
    const history = this.priceHistory.get(symbol);
    history.push({
      price: price,
      volume: volume,
      timestamp: Date.now()
    });
    
    // Keep only last 100 data points
    if (history.length > 100) {
      history.shift();
    }
    
    this.priceHistory.set(symbol, history);
  }

  // Calculate RSI
  calculateRSI(prices, period = 14) {
    if (prices.length < period + 1) return 50;
    
    let gains = 0;
    let losses = 0;
    
    for (let i = 1; i <= period; i++) {
      const change = prices[i] - prices[i - 1];
      if (change > 0) {
        gains += change;
      } else {
        losses += Math.abs(change);
      }
    }
    
    const avgGain = gains / period;
    const avgLoss = losses / period;
    
    if (avgLoss === 0) return 100;
    const rs = avgGain / avgLoss;
    return 100 - (100 / (1 + rs));
  }

  // Calculate MACD
  calculateMACD(prices) {
    if (prices.length < 26) return { line: 0, signal: 0, histogram: 0 };
    
    // Simple EMA calculation
    const ema12 = this.calculateEMA(prices.slice(-12), 12);
    const ema26 = this.calculateEMA(prices.slice(-26), 26);
    const macdLine = ema12 - ema26;
    const signalLine = macdLine * 0.9; // Simplified signal line
    const histogram = macdLine - signalLine;
    
    return { line: macdLine, signal: signalLine, histogram: histogram };
  }

  // Calculate EMA
  calculateEMA(prices, period) {
    if (prices.length === 0) return 0;
    
    const multiplier = 2 / (period + 1);
    let ema = prices[0];
    
    for (let i = 1; i < prices.length; i++) {
      ema = (prices[i] * multiplier) + (ema * (1 - multiplier));
    }
    
    return ema;
  }

  // Calculate Moving Average
  calculateSMA(prices, period) {
    if (prices.length < period) return 0;
    const recent = prices.slice(-period);
    return recent.reduce((sum, price) => sum + price, 0) / period;
  }

  // Detect patterns
  detectPatterns(prices) {
    if (prices.length < 5) return [];
    
    const patterns = [];
    const recent = prices.slice(-5);
    
    // Hammer pattern (bullish reversal)
    if (recent[4] > recent[3] && recent[3] < recent[2] && recent[2] < recent[1]) {
      patterns.push({
        type: 'Hammer',
        signal: 'BUY',
        confidence: 0.7,
        description: 'Bullish reversal pattern detected'
      });
    }
    
    // Shooting star (bearish reversal)
    if (recent[4] < recent[3] && recent[3] > recent[2] && recent[2] > recent[1]) {
      patterns.push({
        type: 'Shooting Star',
        signal: 'SELL',
        confidence: 0.7,
        description: 'Bearish reversal pattern detected'
      });
    }
    
    // Trend continuation
    const trend = this.calculateTrend(prices);
    if (trend.strength > 0.6) {
      patterns.push({
        type: 'Trend Continuation',
        signal: trend.direction === 'UP' ? 'BUY' : 'SELL',
        confidence: trend.strength,
        description: `Strong ${trend.direction.toLowerCase()}trend continuation`
      });
    }
    
    return patterns;
  }

  // Calculate trend direction and strength
  calculateTrend(prices) {
    if (prices.length < 10) return { direction: 'NEUTRAL', strength: 0 };
    
    const recent = prices.slice(-10);
    const sma5 = this.calculateSMA(recent.slice(-5), 5);
    const sma10 = this.calculateSMA(recent, 10);
    
    const difference = sma5 - sma10;
    const strength = Math.min(Math.abs(difference / sma10), 1);
    
    return {
      direction: difference > 0 ? 'UP' : 'DOWN',
      strength: strength
    };
  }

  // Main AI analysis function
  analyzeSymbol(symbol) {
    const history = this.priceHistory.get(symbol);
    if (!history || history.length < 20) {
      return null;
    }

    const prices = history.map(h => h.price);
    const volumes = history.map(h => h.volume);
    const currentPrice = prices[prices.length - 1];

    // Calculate technical indicators
    const rsi = this.calculateRSI(prices);
    const macd = this.calculateMACD(prices);
    const sma20 = this.calculateSMA(prices, 20);
    const sma50 = this.calculateSMA(prices, 50);
    const trend = this.calculateTrend(prices);
    const patterns = this.detectPatterns(prices);

    // Volume analysis
    const avgVolume = volumes.reduce((sum, vol) => sum + vol, 0) / volumes.length;
    const currentVolume = volumes[volumes.length - 1];
    const volumeRatio = currentVolume / avgVolume;

    // AI Signal Generation
    let signalScore = 0;
    let signalReasons = [];
    let signalType = null;

    // RSI Analysis
    if (rsi < 30) {
      signalScore += 3;
      signalReasons.push('RSI Oversold (Bullish)');
      signalType = 'BUY';
    } else if (rsi > 70) {
      signalScore += 3;
      signalReasons.push('RSI Overbought (Bearish)');
      signalType = 'SELL';
    }

    // MACD Analysis
    if (macd.histogram > 0 && macd.line > macd.signal) {
      signalScore += 2;
      signalReasons.push('MACD Bullish Crossover');
      if (!signalType) signalType = 'BUY';
    } else if (macd.histogram < 0 && macd.line < macd.signal) {
      signalScore += 2;
      signalReasons.push('MACD Bearish Crossover');
      if (!signalType) signalType = 'SELL';
    }

    // Moving Average Analysis
    if (currentPrice > sma20 && sma20 > sma50) {
      signalScore += 2;
      signalReasons.push('Price Above Moving Averages');
      if (!signalType) signalType = 'BUY';
    } else if (currentPrice < sma20 && sma20 < sma50) {
      signalScore += 2;
      signalReasons.push('Price Below Moving Averages');
      if (!signalType) signalType = 'SELL';
    }

    // Trend Analysis
    if (trend.strength > 0.5) {
      signalScore += Math.floor(trend.strength * 3);
      signalReasons.push(`Strong ${trend.direction} Trend`);
      if (!signalType) signalType = trend.direction === 'UP' ? 'BUY' : 'SELL';
    }

    // Pattern Analysis
    patterns.forEach(pattern => {
      signalScore += Math.floor(pattern.confidence * 2);
      signalReasons.push(pattern.description);
      if (!signalType) signalType = pattern.signal;
    });

    // Volume Confirmation
    if (volumeRatio > 1.5) {
      signalScore += 1;
      signalReasons.push('High Volume Confirmation');
    }

    // Machine Learning Enhancement (simplified)
    const mlBoost = this.getMachineLearningBoost(symbol, prices);
    signalScore += mlBoost.score;
    if (mlBoost.reason) signalReasons.push(mlBoost.reason);

    // Generate final signal
    if (signalType && signalScore >= 5) {
      const confidence = Math.min(95, 60 + (signalScore * 4));
      
      return {
        symbol: symbol,
        type: signalType,
        confidence: confidence,
        score: signalScore,
        price: currentPrice,
        reasons: signalReasons,
        indicators: {
          rsi: rsi.toFixed(1),
          macd: macd.histogram.toFixed(4),
          trend: trend.direction,
          volume: volumeRatio.toFixed(2)
        },
        timestamp: Date.now(),
        aiGenerated: true
      };
    }

    return null;
  }

  // Simplified Machine Learning Boost
  getMachineLearningBoost(symbol, prices) {
    if (prices.length < 30) return { score: 0, reason: null };

    // Simple momentum-based ML simulation
    const recent = prices.slice(-10);
    const older = prices.slice(-30, -20);
    
    const recentAvg = recent.reduce((sum, p) => sum + p, 0) / recent.length;
    const olderAvg = older.reduce((sum, p) => sum + p, 0) / older.length;
    
    const momentum = (recentAvg - olderAvg) / olderAvg;
    
    if (Math.abs(momentum) > 0.02) { // 2% momentum threshold
      return {
        score: 2,
        reason: `ML Momentum: ${momentum > 0 ? 'Bullish' : 'Bearish'} (${(this.model.accuracy)}% accuracy)`
      };
    }

    return { score: 0, reason: null };
  }

  // Get all generated signals
  getSignals() {
    return this.signals;
  }

  // Add signal to history
  addSignal(signal) {
    this.signals.unshift(signal);
    if (this.signals.length > 50) {
      this.signals = this.signals.slice(0, 50);
    }
  }
}

// =============================================================
// Simple Social Trading
// =============================================================

class SimpleSocialTrading {
  constructor() {
    this.signals = [];
    this.traders = this.generateTraders();
    this.initialized = false;
  }

  generateTraders() {
    const names = ['CryptoKing', 'ForexMaster', 'StockGuru', 'TechTrader', 'ValueHunter'];
    const avatars = ['bg-blue-500', 'bg-green-500', 'bg-purple-500', 'bg-red-500', 'bg-yellow-500'];
    
    return names.map((name, index) => ({
      id: index,
      name,
      avatar: avatars[index],
      winRate: (65 + Math.random() * 25).toFixed(1),
      followers: Math.floor(Math.random() * 5000) + 500,
      verified: Math.random() > 0.5,
      specialties: this.getRandomSpecialties()
    }));
  }

  getRandomSpecialties() {
    const all = ['Forex', 'Stocks', 'Crypto', 'Commodities'];
    const count = Math.floor(Math.random() * 2) + 1;
    return all.sort(() => 0.5 - Math.random()).slice(0, count);
  }

  generateSignal(marketData) {
    if (!marketData || marketData.length === 0) return null;

    const randomAsset = marketData[Math.floor(Math.random() * marketData.length)];
    const randomTrader = this.traders[Math.floor(Math.random() * this.traders.length)];
    const signalTypes = ['BUY', 'SELL'];
    const reasons = [
      'Technical breakout detected',
      'Strong momentum signal',
      'Support/Resistance levels',
      'Moving average crossover',
      'Volume spike confirmation'
    ];

    return {
      id: Date.now() + Math.random(),
      trader: randomTrader,
      symbol: randomAsset.symbol,
      type: signalTypes[Math.floor(Math.random() * signalTypes.length)],
      price: randomAsset.currentPrice,
      confidence: Math.floor(Math.random() * 30) + 70,
      reasoning: reasons[Math.floor(Math.random() * reasons.length)],
      timestamp: Date.now(),
      likes: Math.floor(Math.random() * 20),
      comments: Math.floor(Math.random() * 10)
    };
  }

  addSignal(signal) {
    this.signals.unshift(signal);
    if (this.signals.length > 20) {
      this.signals = this.signals.slice(0, 20);
    }
  }

  getSignals() {
    return this.signals;
  }

  getTraders() {
    return this.traders;
  }
}

// =============================================================
// Main Trading App Component
// =============================================================

const MultiAssetTradingApp = () => {
  // Core State
  const [activeTab, setActiveTab] = useState('dashboard');
  const [selectedAssetClass, setSelectedAssetClass] = useState('STOCKS');
  const [selectedSymbol, setSelectedSymbol] = useState('AAPL');
  const [theme, setTheme] = useState('dark');
  const [isMobile, setIsMobile] = useState(false);

  // Market Data
  const [marketGenerator] = useState(() => new MarketDataGenerator());
  const [marketData, setMarketData] = useState([]);
  const [connectionStatus, setConnectionStatus] = useState('connected');

  // AI Signal Engine
  const [aiEngine] = useState(() => new AISignalEngine());
  const [aiSignals, setAiSignals] = useState([]);
  const [currentAiSignal, setCurrentAiSignal] = useState(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  // Social Trading
  const [socialTrading] = useState(() => new SimpleSocialTrading());
  const [signals, setSignals] = useState([]);
  const [followedTraders, setFollowedTraders] = useState(new Set());

  // Portfolio
  const [portfolio, setPortfolio] = useState({
    balance: 100000,
    positions: [],
    totalPnL: 0
  });

  // Mobile Detection
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // Initialize Market Data
  useEffect(() => {
    marketGenerator.initialize();
    setMarketData(marketGenerator.getAllPrices());
    
    // Update prices every 3 seconds
    const interval = setInterval(() => {
      marketGenerator.updatePrices();
      const newData = marketGenerator.getAllPrices();
      setMarketData(newData);
      
      // Feed data to AI engine
      newData.forEach(asset => {
        aiEngine.addPriceData(asset.symbol, asset.currentPrice, asset.volume);
      });
    }, 3000);

    return () => clearInterval(interval);
  }, [marketGenerator, aiEngine]);

  // AI Signal Analysis
  useEffect(() => {
    if (marketData.length === 0) return;

    const analyzeSignals = () => {
      setIsAnalyzing(true);
      
      // Analyze top assets from each class
      const topAssets = [
        'AAPL', 'EURUSD', 'BTCUSD', 'XAUUSD', 'SPX500'  // Representative assets
      ];
      
      setTimeout(() => {
        topAssets.forEach(symbol => {
          const signal = aiEngine.analyzeSymbol(symbol);
          if (signal) {
            aiEngine.addSignal(signal);
            setCurrentAiSignal(signal);
          }
        });
        
        setAiSignals([...aiEngine.getSignals()]);
        setIsAnalyzing(false);
      }, 1500); // Simulate analysis time
    };

    // Run AI analysis every 15 seconds
    const aiInterval = setInterval(analyzeSignals, 15000);
    
    // Initial analysis after 5 seconds
    const initialTimeout = setTimeout(analyzeSignals, 5000);

    return () => {
      clearInterval(aiInterval);
      clearTimeout(initialTimeout);
    };
  }, [marketData, aiEngine]);

  // Generate Social Signals
  useEffect(() => {
    if (marketData.length === 0) return;

    const generateSignalInterval = setInterval(() => {
      const newSignal = socialTrading.generateSignal(marketData);
      if (newSignal) {
        socialTrading.addSignal(newSignal);
        setSignals([...socialTrading.getSignals()]);
      }
    }, 10000); // New signal every 10 seconds

    return () => clearInterval(generateSignalInterval);
  }, [marketData, socialTrading]);

  // Helper Functions
  const getCurrentPrice = useCallback((symbol) => {
    const asset = marketData.find(item => item.symbol === symbol);
    return asset ? asset.currentPrice : 0;
  }, [marketData]);

  const getAssetsByClass = useCallback((assetClass) => {
    return marketGenerator.getAssetsByClass(assetClass);
  }, [marketGenerator]);

  const formatPrice = useCallback((price, symbol) => {
    const asset = Object.values(ASSET_CLASSES)
      .flatMap(ac => ac.assets)
      .find(a => a.symbol === symbol);
    
    if (!asset) return price.toFixed(2);
    
    if (asset.pip >= 1) return price.toFixed(0);
    if (asset.pip >= 0.1) return price.toFixed(1);
    if (asset.pip >= 0.01) return price.toFixed(2);
    if (asset.pip >= 0.001) return price.toFixed(3);
    if (asset.pip >= 0.0001) return price.toFixed(4);
    return price.toFixed(5);
  }, []);

  const followTrader = useCallback((traderId) => {
    setFollowedTraders(prev => new Set([...prev, traderId]));
  }, []);

  const unfollowTrader = useCallback((traderId) => {
    setFollowedTraders(prev => {
      const newSet = new Set(prev);
      newSet.delete(traderId);
      return newSet;
    });
  }, []);

  const likeSignal = useCallback((signalId) => {
    setSignals(prev => prev.map(signal => 
      signal.id === signalId 
        ? { ...signal, likes: signal.likes + 1 }
        : signal
    ));
  }, []);

  // Mobile Navigation Component
  const MobileNavigation = () => (
    <div className="fixed bottom-0 left-0 right-0 bg-gray-800 border-t border-gray-700 z-50 md:hidden">
      <div className="flex justify-around py-2">
        {[
          { id: 'dashboard', icon: Home, label: 'Market' },
          { id: 'assets', icon: Globe, label: 'Assets' },
          { id: 'social', icon: Users, label: 'Social' },
          { id: 'portfolio', icon: Target, label: 'Portfolio' }
        ].map(tab => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`flex flex-col items-center py-2 px-3 rounded ${
              activeTab === tab.id ? 'text-blue-400' : 'text-gray-400'
            }`}
          >
            <tab.icon className="w-5 h-5 mb-1" />
            <span className="text-xs">{tab.label}</span>
          </button>
        ))}
      </div>
    </div>
  );

  // Content Renderer
  const renderContent = () => {
    if (isMobile) {
      return renderMobileContent();
    } else {
      return renderDesktopContent();
    }
  };

  const renderMobileContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return (
          <div className="space-y-4 pb-20">
            {/* Asset Class Selector */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="font-semibold mb-3">Asset Classes</h3>
              <div className="grid grid-cols-2 gap-3">
                {Object.entries(ASSET_CLASSES).map(([key, assetClass]) => (
                  <button
                    key={key}
                    onClick={() => setSelectedAssetClass(key)}
                    className={`p-3 rounded-lg flex items-center gap-2 ${
                      selectedAssetClass === key ? 'bg-blue-600' : 'bg-gray-700'
                    }`}
                  >
                    <span className="text-xl">{assetClass.icon}</span>
                    <span className="font-semibold">{assetClass.name}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Market Overview */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="font-semibold mb-3">
                {ASSET_CLASSES[selectedAssetClass]?.name} Markets
              </h3>
              <div className="space-y-3">
                {getAssetsByClass(selectedAssetClass).map(asset => (
                  <div key={asset.symbol} className="flex items-center justify-between p-3 bg-gray-700 rounded">
                    <div>
                      <div className="font-bold">{asset.symbol}</div>
                      <div className="text-xs text-gray-400">{asset.name}</div>
                    </div>
                    <div className="text-right">
                      <div className="font-bold">
                        {formatPrice(asset.currentPrice || asset.basePrice, asset.symbol)}
                      </div>
                      <div className={`text-xs ${
                        (asset.changePercent || 0) >= 0 ? 'text-green-400' : 'text-red-400'
                      }`}>
                        {(asset.changePercent || 0) >= 0 ? '+' : ''}
                        {(asset.changePercent || 0).toFixed(2)}%
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* AI Signal Alert */}
            {currentAiSignal && (
              <div className={`bg-gray-800 rounded-lg p-4 border-2 ${
                currentAiSignal.type === 'BUY' ? 'border-green-500' : 'border-red-500'
              }`}>
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                      <span className="text-white font-bold text-sm">AI</span>
                    </div>
                    <div>
                      <div className="font-bold">AI Trading Signal</div>
                      <div className="text-xs text-gray-400">
                        {isAnalyzing ? 'Analyzing...' : 'Analysis Complete'}
                      </div>
                    </div>
                  </div>
                  <div className={`px-3 py-1 rounded font-bold ${
                    currentAiSignal.type === 'BUY' ? 'bg-green-600' : 'bg-red-600'
                  }`}>
                    {currentAiSignal.type} {currentAiSignal.symbol}
                  </div>
                </div>
                
                <div className="mb-3">
                  <div className="flex justify-between items-center mb-2">
                    <span className="font-semibold">
                      Price: {formatPrice(currentAiSignal.price, currentAiSignal.symbol)}
                    </span>
                    <span className="text-xl font-bold">
                      {currentAiSignal.confidence}% Confidence
                    </span>
                  </div>
                  <div className="text-sm text-gray-300">
                    Signal Score: {currentAiSignal.score}/15
                  </div>
                </div>
                
                <div className="mb-3">
                  <div className="text-sm font-semibold mb-1">AI Analysis:</div>
                  <div className="text-xs space-y-1">
                    {currentAiSignal.reasons.map((reason, idx) => (
                      <div key={idx} className="text-gray-300">â€¢ {reason}</div>
                    ))}
                  </div>
                </div>
                
                <div className="grid grid-cols-4 gap-2 text-xs mb-3">
                  <div>
                    <span className="text-gray-400">RSI:</span>
                    <span className="ml-1 font-bold">{currentAiSignal.indicators.rsi}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">MACD:</span>
                    <span className="ml-1 font-bold">{currentAiSignal.indicators.macd}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Trend:</span>
                    <span className="ml-1 font-bold">{currentAiSignal.indicators.trend}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Volume:</span>
                    <span className="ml-1 font-bold">{currentAiSignal.indicators.volume}x</span>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-3">
                  <button className={`py-2 rounded font-semibold ${
                    currentAiSignal.type === 'BUY' ? 'bg-green-600 hover:bg-green-700' : 'bg-gray-600'
                  }`}>
                    Execute {currentAiSignal.type}
                  </button>
                  <button className="bg-blue-600 hover:bg-blue-700 py-2 rounded font-semibold">
                    View Details
                  </button>
                </div>
              </div>
            )}

            {/* AI Signals History */}
            {aiSignals.length > 0 && (
              <div className="bg-gray-800 rounded-lg p-4">
                <h3 className="font-semibold mb-3 flex items-center gap-2">
                  <div className="w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center">
                    <span className="text-white font-bold text-xs">AI</span>
                  </div>
                  AI Signal History
                </h3>
                <div className="space-y-3">
                  {aiSignals.slice(0, 3).map(signal => (
                    <div key={signal.timestamp} className="bg-gray-700 p-3 rounded">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <span className="font-semibold text-sm">{signal.symbol}</span>
                          <span className={`px-2 py-1 text-xs rounded font-bold ${
                            signal.type === 'BUY' ? 'bg-green-600' : 'bg-red-600'
                          }`}>
                            {signal.type}
                          </span>
                        </div>
                        <span className="text-sm font-bold">{signal.confidence}%</span>
                      </div>
                      <div className="text-xs text-gray-400">
                        {formatPrice(signal.price, signal.symbol)} â€¢ {signal.reasons.slice(0, 2).join(', ')}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        );

      case 'assets':
        return (
          <div className="space-y-4 pb-20">
            {/* Asset Class Tabs */}
            <div className="bg-gray-800 rounded-lg p-4">
              <div className="flex gap-2 overflow-x-auto">
                {Object.entries(ASSET_CLASSES).map(([key, assetClass]) => (
                  <button
                    key={key}
                    onClick={() => setSelectedAssetClass(key)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg whitespace-nowrap ${
                      selectedAssetClass === key ? 'bg-blue-600' : 'bg-gray-700'
                    }`}
                  >
                    <span>{assetClass.icon}</span>
                    <span className="text-sm">{assetClass.name}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Asset List */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="font-semibold mb-3">
                {ASSET_CLASSES[selectedAssetClass]?.name} Trading
              </h3>
              <div className="space-y-3">
                {getAssetsByClass(selectedAssetClass).map(asset => (
                  <div key={asset.symbol} className="bg-gray-700 p-4 rounded">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <div className="font-bold text-lg">{asset.symbol}</div>
                        <div className="text-sm text-gray-400">{asset.name}</div>
                      </div>
                      <div className="text-right">
                        <div className="font-bold text-lg">
                          {formatPrice(asset.currentPrice || asset.basePrice, asset.symbol)}
                        </div>
                        <div className={`text-sm ${
                          (asset.changePercent || 0) >= 0 ? 'text-green-400' : 'text-red-400'
                        }`}>
                          {(asset.changePercent || 0) >= 0 ? '+' : ''}
                          {(asset.changePercent || 0).toFixed(2)}%
                        </div>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-3">
                      <button className="bg-green-600 hover:bg-green-700 py-2 rounded font-semibold">
                        BUY
                      </button>
                      <button className="bg-red-600 hover:bg-red-700 py-2 rounded font-semibold">
                        SELL
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 'social':
        return (
          <div className="space-y-4 pb-20">
            {/* Top Traders */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="font-semibold mb-3 flex items-center gap-2">
                <Crown className="w-5 h-5 text-yellow-400" />
                Top Traders
              </h3>
              <div className="space-y-3">
                {socialTrading.getTraders().map(trader => (
                  <div key={trader.id} className="flex items-center justify-between p-3 bg-gray-700 rounded">
                    <div className="flex items-center gap-3">
                      <div className={`w-8 h-8 rounded-full ${trader.avatar} flex items-center justify-center text-sm font-bold text-white`}>
                        {trader.name[0]}
                      </div>
                      <div>
                        <div className="flex items-center gap-2">
                          <span className="font-semibold text-sm">{trader.name}</span>
                          {trader.verified && <CheckCircle className="w-3 h-3 text-blue-400" />}
                        </div>
                        <div className="text-xs text-gray-400">
                          {trader.winRate}% â€¢ {trader.followers} followers
                        </div>
                      </div>
                    </div>
                    <button
                      onClick={() => followedTraders.has(trader.id) ? unfollowTrader(trader.id) : followTrader(trader.id)}
                      className={`px-3 py-1 rounded text-xs ${
                        followedTraders.has(trader.id) ? 'bg-gray-600 text-gray-300' : 'bg-blue-600 text-white'
                      }`}
                    >
                      {followedTraders.has(trader.id) ? 'Following' : 'Follow'}
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* Social Signals */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="font-semibold mb-3">Community Signals</h3>
              <div className="space-y-4">
                {signals.map(signal => (
                  <div key={signal.id} className="bg-gray-700 p-3 rounded">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        <div className={`w-6 h-6 rounded-full ${signal.trader.avatar} flex items-center justify-center text-xs font-bold text-white`}>
                          {signal.trader.name[0]}
                        </div>
                        <div>
                          <span className="font-semibold text-sm">{signal.trader.name}</span>
                          <div className="text-xs text-gray-400">
                            {new Date(signal.timestamp).toLocaleTimeString()}
                          </div>
                        </div>
                      </div>
                      <div className={`px-2 py-1 rounded text-xs font-bold ${
                        signal.type === 'BUY' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                      }`}>
                        {signal.type} {signal.symbol}
                      </div>
                    </div>
                    
                    <div className="mb-3">
                      <div className="font-semibold">
                        Price: {formatPrice(signal.price, signal.symbol)}
                      </div>
                      <div className="text-sm text-gray-300 mt-1">{signal.reasoning}</div>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <button
                          onClick={() => likeSignal(signal.id)}
                          className="flex items-center gap-1 text-gray-400"
                        >
                          <Heart className="w-4 h-4" />
                          <span className="text-xs">{signal.likes}</span>
                        </button>
                        <button className="flex items-center gap-1 text-gray-400">
                          <MessageCircle className="w-4 h-4" />
                          <span className="text-xs">{signal.comments}</span>
                        </button>
                      </div>
                      <button className="px-3 py-1 bg-blue-600 text-white rounded text-xs">
                        Copy Trade
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 'portfolio':
        return (
          <div className="space-y-4 pb-20">
            {/* Portfolio Summary */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="font-semibold mb-4">Portfolio Overview</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold">${portfolio.balance.toLocaleString()}</div>
                  <div className="text-sm text-gray-400">Total Balance</div>
                </div>
                <div className="text-center">
                  <div className={`text-2xl font-bold ${
                    portfolio.totalPnL >= 0 ? 'text-green-400' : 'text-red-400'
                  }`}>
                    {portfolio.totalPnL >= 0 ? '+' : ''}${portfolio.totalPnL.toFixed(2)}
                  </div>
                  <div className="text-sm text-gray-400">Total P&L</div>
                </div>
              </div>
            </div>

            {/* Positions */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="font-semibold mb-3">Open Positions</h3>
              {portfolio.positions.length === 0 ? (
                <div className="text-center text-gray-500 py-8">
                  <Target className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>No open positions</p>
                  <p className="text-xs">Start trading to see your positions here</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {portfolio.positions.map((position, idx) => (
                    <div key={idx} className="bg-gray-700 p-3 rounded">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-bold">{position.symbol}</div>
                          <div className="text-sm text-gray-400">
                            {position.side} {position.quantity}
                          </div>
                        </div>
                        <div className="text-right">
                          <div className={`font-bold ${position.pnl >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                            {position.pnl >= 0 ? '+' : ''}${position.pnl.toFixed(2)}
                          </div>
                          <div className="text-sm text-gray-400">
                            {formatPrice(position.currentPrice, position.symbol)}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Quick Actions */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="font-semibold mb-3">Quick Actions</h3>
              <div className="grid grid-cols-2 gap-3">
                <button className="bg-green-600 hover:bg-green-700 py-3 rounded-lg font-semibold">
                  Open Position
                </button>
                <button className="bg-blue-600 hover:bg-blue-700 py-3 rounded-lg font-semibold">
                  View Analytics
                </button>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  const renderDesktopContent = () => {
    return (
      <div className="space-y-6">
        {/* AI Signal Banner */}
        {currentAiSignal && (
          <div className={`bg-gray-800 rounded-lg p-6 border-2 ${
            currentAiSignal.type === 'BUY' ? 'border-green-500' : 'border-red-500'
          }`}>
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold">AI</span>
                </div>
                <div>
                  <div className="text-xl font-bold">AI Trading Signal Alert</div>
                  <div className="text-sm text-gray-400">
                    Generated {new Date(currentAiSignal.timestamp).toLocaleTimeString()}
                    {isAnalyzing && ' â€¢ Analyzing more symbols...'}
                  </div>
                </div>
              </div>
              <div className={`px-6 py-2 rounded-lg text-xl font-bold ${
                currentAiSignal.type === 'BUY' ? 'bg-green-600' : 'bg-red-600'
              }`}>
                {currentAiSignal.type} {currentAiSignal.symbol}
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <div className="text-sm text-gray-400 mb-2">Signal Details</div>
                <div className="space-y-1">
                  <div>Price: <span className="font-bold">{formatPrice(currentAiSignal.price, currentAiSignal.symbol)}</span></div>
                  <div>Confidence: <span className="font-bold text-green-400">{currentAiSignal.confidence}%</span></div>
                  <div>Signal Score: <span className="font-bold">{currentAiSignal.score}/15</span></div>
                </div>
              </div>
              
              <div>
                <div className="text-sm text-gray-400 mb-2">Technical Indicators</div>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div>RSI: <span className="font-bold">{currentAiSignal.indicators.rsi}</span></div>
                  <div>MACD: <span className="font-bold">{currentAiSignal.indicators.macd}</span></div>
                  <div>Trend: <span className="font-bold">{currentAiSignal.indicators.trend}</span></div>
                  <div>Volume: <span className="font-bold">{currentAiSignal.indicators.volume}x</span></div>
                </div>
              </div>
              
              <div>
                <div className="text-sm text-gray-400 mb-2">AI Analysis Reasons</div>
                <div className="text-sm space-y-1">
                  {currentAiSignal.reasons.slice(0, 4).map((reason, idx) => (
                    <div key={idx} className="text-gray-300">â€¢ {reason}</div>
                  ))}
                </div>
              </div>
            </div>
            
            <div className="flex gap-4 mt-6">
              <button className={`px-8 py-3 rounded-lg font-semibold text-lg ${
                currentAiSignal.type === 'BUY' ? 'bg-green-600 hover:bg-green-700' : 'bg-gray-600'
              }`}>
                Execute AI Signal ({currentAiSignal.type})
              </button>
              <button className="px-8 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold">
                View Full Analysis
              </button>
              <button className="px-8 py-3 bg-gray-600 hover:bg-gray-700 rounded-lg font-semibold">
                Dismiss
              </button>
            </div>
          </div>
        )}

        {/* Asset Class Navigation */}
        <div className="bg-gray-800 rounded-lg p-4">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-4 overflow-x-auto">
              {Object.entries(ASSET_CLASSES).map(([key, assetClass]) => (
                <button
                  key={key}
                  onClick={() => setSelectedAssetClass(key)}
                  className={`flex items-center gap-3 px-6 py-3 rounded-lg whitespace-nowrap ${
                    selectedAssetClass === key ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600'
                  }`}
                >
                  <span className="text-2xl">{assetClass.icon}</span>
                  <span className="font-semibold">{assetClass.name}</span>
                  <span className="text-sm text-gray-400">
                    {assetClass.assets.length} assets
                  </span>
                </button>
              ))}
            </div>
            <button
              onClick={() => {
                setIsAnalyzing(true);
                setTimeout(() => {
                  const symbols = ['AAPL', 'EURUSD', 'BTCUSD', 'XAUUSD'];
                  symbols.forEach(symbol => {
                    const signal = aiEngine.analyzeSymbol(symbol);
                    if (signal) {
                      aiEngine.addSignal(signal);
                      setCurrentAiSignal(signal);
                    }
                  });
                  setAiSignals([...aiEngine.getSignals()]);
                  setIsAnalyzing(false);
                }, 2000);
              }}
              disabled={isAnalyzing}
              className="flex items-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 rounded-lg font-semibold"
            >
              <div className="w-5 h-5 bg-white rounded-full flex items-center justify-center">
                <span className="text-purple-600 font-bold text-xs">AI</span>
              </div>
              {isAnalyzing ? 'Analyzing...' : 'Run AI Analysis'}
            </button>
          </div>
        </div>

        {/* Market Data Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Market Data */}
          <div className="lg:col-span-2">
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-4">
                {ASSET_CLASSES[selectedAssetClass]?.name} Markets
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {getAssetsByClass(selectedAssetClass).map(asset => (
                  <div key={asset.symbol} className="bg-gray-700 p-4 rounded-lg">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <div className="font-bold text-lg">{asset.symbol}</div>
                        <div className="text-sm text-gray-400">{asset.name}</div>
                      </div>
                      <div className="text-right">
                        <div className="font-bold text-xl">
                          {formatPrice(asset.currentPrice || asset.basePrice, asset.symbol)}
                        </div>
                        <div className={`text-sm ${
                          (asset.changePercent || 0) >= 0 ? 'text-green-400' : 'text-red-400'
                        }`}>
                          {(asset.changePercent || 0) >= 0 ? '+' : ''}
                          {(asset.changePercent || 0).toFixed(2)}%
                        </div>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-3 mt-4">
                      <button className="bg-green-600 hover:bg-green-700 py-2 rounded font-semibold">
                        BUY
                      </button>
                      <button className="bg-red-600 hover:bg-red-700 py-2 rounded font-semibold">
                        SELL
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* AI Signals & Social Trading Sidebar */}
          <div className="space-y-6">
            {/* AI Signals */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold text-xs">AI</span>
                </div>
                AI Signals
              </h3>
              {aiSignals.length === 0 ? (
                <div className="text-center text-gray-500 py-8">
                  <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-3 opacity-50">
                    <span className="text-white font-bold">AI</span>
                  </div>
                  <p>AI is analyzing markets...</p>
                  <p className="text-xs">Signals will appear here</p>
                </div>
              ) : (
                <div className="space-y-3 max-h-64 overflow-y-auto">
                  {aiSignals.slice(0, 5).map(signal => (
                    <div key={signal.timestamp} className="bg-gray-700 p-3 rounded">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <span className="font-bold">{signal.symbol}</span>
                          <span className={`px-2 py-1 text-xs rounded font-bold ${
                            signal.type === 'BUY' ? 'bg-green-600' : 'bg-red-600'
                          }`}>
                            {signal.type}
                          </span>
                        </div>
                        <span className="text-sm font-bold">{signal.confidence}%</span>
                      </div>
                      <div className="text-xs text-gray-400 mb-2">
                        {formatPrice(signal.price, signal.symbol)} â€¢ Score: {signal.score}/15
                      </div>
                      <div className="text-xs text-gray-300">
                        {signal.reasons.slice(0, 2).join(', ')}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Social Trading */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-4">Community Signals</h3>
              <div className="space-y-4 max-h-64 overflow-y-auto">
                {signals.slice(0, 3).map(signal => (
                  <div key={signal.id} className="bg-gray-700 p-3 rounded">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <div className={`w-6 h-6 rounded-full ${signal.trader.avatar} flex items-center justify-center text-xs font-bold text-white`}>
                          {signal.trader.name[0]}
                        </div>
                        <span className="font-semibold text-sm">{signal.trader.name}</span>
                      </div>
                      <span className={`px-2 py-1 text-xs rounded font-bold ${
                        signal.type === 'BUY' ? 'bg-green-600' : 'bg-red-600'
                      }`}>
                        {signal.type}
                      </span>
                    </div>
                    <div className="text-sm">
                      <span className="font-bold">{signal.symbol}</span> at {formatPrice(signal.price, signal.symbol)}
                    </div>
                    <div className="text-xs text-gray-400 mt-1">{signal.reasoning}</div>
                    
                    <div className="flex items-center justify-between mt-3">
                      <div className="flex items-center gap-3">
                        <button
                          onClick={() => likeSignal(signal.id)}
                          className="flex items-center gap-1 text-gray-400 hover:text-red-400"
                        >
                          <Heart className="w-3 h-3" />
                          <span className="text-xs">{signal.likes}</span>
                        </button>
                      </div>
                      <button className="px-2 py-1 bg-blue-600 text-white rounded text-xs">
                        Copy
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className={`min-h-screen ${theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'} transition-colors`}>
      {/* Mobile Layout */}
      {isMobile ? (
        <div className="min-h-screen">
          {/* Mobile Header */}
          <div className="flex items-center justify-between p-4 bg-gray-800">
            <div className="flex items-center gap-3">
              <div>
                <h1 className="font-bold text-lg">Multi-Asset Trading</h1>
                <div className="flex items-center gap-2 text-xs text-gray-400">
                  <Signal className={`w-3 h-3 ${connectionStatus === 'connected' ? 'text-green-400' : 'text-red-400'}`} />
                  {connectionStatus === 'connected' ? 'Live Data' : 'Disconnected'}
                </div>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <div className="text-right">
                <div className="text-sm font-bold">${portfolio.balance.toLocaleString()}</div>
                <div className="text-xs text-gray-400">Balance</div>
              </div>
              <button
                onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
                className="p-2 rounded-lg bg-gray-700"
              >
                {theme === 'dark' ? <Sun className="w-4 h-4" /> : <Moon className="w-4 h-4" />}
              </button>
            </div>
          </div>

          {/* Mobile Content */}
          <div className="p-4">
            {renderContent()}
          </div>

          {/* Mobile Navigation */}
          <MobileNavigation />
        </div>
      ) : (
        /* Desktop Layout */
        <div className="max-w-7xl mx-auto p-4">
          {/* Desktop Header */}
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-3xl font-bold flex items-center gap-2">
                <Globe className="w-8 h-8 text-blue-400" />
                Multi-Asset Trading Platform
                <span className="text-sm bg-gradient-to-r from-green-600 to-blue-600 px-2 py-1 rounded">LIVE</span>
              </h1>
              <p className="text-gray-400">Stocks â€¢ Forex â€¢ Crypto â€¢ Commodities â€¢ Indices</p>
            </div>
            
            <div className="flex items-center gap-2">
              <div className={`px-3 py-1 rounded text-xs flex items-center gap-1 ${
                connectionStatus === 'connected' ? 'bg-green-900 text-green-300' : 'bg-red-900 text-red-300'
              }`}>
                <Signal className="w-3 h-3" />
                {connectionStatus === 'connected' ? 'Live Market Data' : 'Disconnected'}
              </div>
              
              <div className="px-3 py-1 bg-blue-900 text-blue-300 rounded text-xs">
                {marketData.length} Assets
              </div>
              
              <button
                onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
                className="p-2 rounded-lg bg-gray-800 hover:bg-gray-700"
              >
                {theme === 'dark' ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
              </button>
            </div>
          </div>

          {/* Desktop Content */}
          {renderContent()}
        </div>
      )}
    </div>
  );
};

export default MultiAssetTradingApp;
